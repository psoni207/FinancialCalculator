import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import { Redirect } from "wouter";
import FinanceNavbar from "@/components/FinanceNavbar";
import FinanceFooter from "@/components/FinanceFooter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { User, Client, CLIENT_STATUS } from "@shared/schema";
import { Loader2, Plus, Search, Filter } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

type UserWithoutPassword = Omit<User, "password">;

// Form validation schema for client
const clientFormSchema = z.object({
  clientId: z.string().min(1, "Client ID is required"),
  name: z.string().min(1, "Name is required"),
  broker: z.string().min(1, "Broker is required"),
  contactNumber: z.string().min(10, "Valid contact number is required"),
  email: z.string().email("Valid email is required"),
  pan: z.string().min(10, "Valid PAN number is required"),
  aadhar: z.string().min(12, "Valid Aadhar number is required"),
  status: z.enum([CLIENT_STATUS.ACTIVE, CLIENT_STATUS.INACTIVE]),
  fund: z.coerce.number().min(0, "Fund amount must be 0 or greater")
});

type ClientFormValues = z.infer<typeof clientFormSchema>;

export default function AdminPanel() {
  const { user } = useAuth();
  const { toast } = useToast();
  
  // Tab state
  const [activeTab, setActiveTab] = useState("users");
  
  // User management state
  const [users, setUsers] = useState<UserWithoutPassword[]>([]);
  const [userLoading, setUserLoading] = useState(true);
  const [userSearchQuery, setUserSearchQuery] = useState("");
  const [filterRole, setFilterRole] = useState("");
  
  // Client management state
  const [clients, setClients] = useState<Client[]>([]);
  const [clientLoading, setClientLoading] = useState(true);
  const [clientDialogOpen, setClientDialogOpen] = useState(false);
  const [editingClient, setEditingClient] = useState<Client | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterBroker, setFilterBroker] = useState("");
  const [filterStatus, setFilterStatus] = useState("");

  // Fetch all users
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setUserLoading(true);
        const response = await apiRequest("GET", "/api/admin/users");
        const data = await response.json();
        setUsers(data);
      } catch (error) {
        console.error("Error fetching users:", error);
        toast({
          title: "Error",
          description: "Failed to load users. Please try again.",
          variant: "destructive",
        });
      } finally {
        setUserLoading(false);
      }
    };

    if (activeTab === "users") {
      fetchUsers();
    }
  }, [toast, activeTab]);
  
  // Fetch all clients
  useEffect(() => {
    const fetchClients = async () => {
      try {
        setClientLoading(true);
        const response = await apiRequest("GET", "/api/admin/clients");
        const data = await response.json();
        setClients(data);
      } catch (error) {
        console.error("Error fetching clients:", error);
        toast({
          title: "Error",
          description: "Failed to load clients. Please try again.",
          variant: "destructive",
        });
      } finally {
        setClientLoading(false);
      }
    };

    if (activeTab === "clients") {
      fetchClients();
    }
  }, [toast, activeTab]);

  // Handle premium access toggle
  const handleTogglePremiumAccess = async (userId: number, currentStatus: boolean) => {
    try {
      const response = await apiRequest(
        "PATCH",
        `/api/admin/users/${userId}/premium`,
        { hasPremiumAccess: !currentStatus }
      );
      
      if (response.ok) {
        const updatedUser = await response.json();
        setUsers(users.map(u => u.id === userId ? updatedUser : u));
        
        toast({
          title: "Success",
          description: `Premium access ${!currentStatus ? "granted to" : "revoked from"} ${updatedUser.username}`,
        });
      } else {
        throw new Error("Failed to update premium access");
      }
    } catch (error) {
      console.error("Error updating premium access:", error);
      toast({
        title: "Error",
        description: "Failed to update premium access. Please try again.",
        variant: "destructive",
      });
    }
  };

  // Redirect non-admin users
  if (user && user.role !== "ADMIN") {
    return <Redirect to="/" />;
  }

  // Redirect unauthenticated users
  if (!user) {
    return <Redirect to="/auth" />;
  }

  // Client form setup
  const form = useForm<ClientFormValues>({
    resolver: zodResolver(clientFormSchema),
    defaultValues: {
      clientId: "",
      name: "",
      broker: "",
      contactNumber: "",
      email: "",
      pan: "",
      aadhar: "",
      status: CLIENT_STATUS.ACTIVE,
      fund: 0
    }
  });
  
  // Submit handler for client form
  const onSubmit = async (data: ClientFormValues) => {
    try {
      const endpoint = editingClient 
        ? `/api/admin/clients/${editingClient.id}`
        : "/api/admin/clients";
      
      const method = editingClient ? "PATCH" : "POST";
      
      const response = await apiRequest(method, endpoint, data);
      
      if (!response.ok) {
        throw new Error(`Failed to ${editingClient ? "update" : "create"} client`);
      }
      
      const responseData = await response.json();
      
      if (editingClient) {
        // Update the client in the list
        setClients(clients.map(c => c.id === editingClient.id ? responseData : c));
      } else {
        // Add the new client to the list
        setClients([...clients, responseData]);
      }
      
      // Reset form and close dialog
      form.reset();
      setEditingClient(null);
      setClientDialogOpen(false);
      
      toast({
        title: "Success",
        description: `Client ${editingClient ? "updated" : "created"} successfully`,
      });
    } catch (error) {
      console.error(`Error ${editingClient ? "updating" : "creating"} client:`, error);
      toast({
        title: "Error",
        description: `Failed to ${editingClient ? "update" : "create"} client. Please try again.`,
        variant: "destructive",
      });
    }
  };
  
  // Handle client deletion
  const handleDeleteClient = async (clientId: number) => {
    if (!confirm("Are you sure you want to delete this client? This action cannot be undone.")) {
      return;
    }
    
    try {
      const response = await apiRequest("DELETE", `/api/admin/clients/${clientId}`);
      
      if (!response.ok) {
        throw new Error("Failed to delete client");
      }
      
      // Remove the client from the list
      setClients(clients.filter(c => c.id !== clientId));
      
      toast({
        title: "Success",
        description: "Client deleted successfully",
      });
    } catch (error) {
      console.error("Error deleting client:", error);
      toast({
        title: "Error",
        description: "Failed to delete client. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  // Handle editing a client
  const handleEditClient = (client: Client) => {
    // Set form values
    form.reset({
      clientId: client.clientId,
      name: client.name,
      broker: client.broker,
      contactNumber: client.contactNumber,
      email: client.email,
      pan: client.pan,
      aadhar: client.aadhar,
      status: client.status as any,
      fund: parseFloat(client.fund.toString())
    });
    
    // Set editing client
    setEditingClient(client);
    
    // Open dialog
    setClientDialogOpen(true);
  };
  
  // Handle client search
  const handleSearchClients = async () => {
    if (!searchQuery.trim()) {
      return;
    }
    
    try {
      setClientLoading(true);
      const response = await apiRequest("GET", `/api/admin/clients/search?q=${encodeURIComponent(searchQuery)}`);
      const data = await response.json();
      setClients(data);
    } catch (error) {
      console.error("Error searching clients:", error);
      toast({
        title: "Error",
        description: "Failed to search clients. Please try again.",
        variant: "destructive",
      });
    } finally {
      setClientLoading(false);
    }
  };
  
  // Handle client filtering by broker
  const handleFilterByBroker = async () => {
    if (!filterBroker.trim()) {
      return;
    }
    
    try {
      setClientLoading(true);
      const response = await apiRequest("GET", `/api/admin/clients/broker/${encodeURIComponent(filterBroker)}`);
      const data = await response.json();
      setClients(data);
    } catch (error) {
      console.error("Error filtering clients by broker:", error);
      toast({
        title: "Error",
        description: "Failed to filter clients. Please try again.",
        variant: "destructive",
      });
    } finally {
      setClientLoading(false);
    }
  };
  
  // Handle client filtering by status
  const handleFilterByStatus = async () => {
    if (!filterStatus) {
      return;
    }
    
    try {
      setClientLoading(true);
      const response = await apiRequest("GET", `/api/admin/clients/status/${filterStatus}`);
      const data = await response.json();
      setClients(data);
    } catch (error) {
      console.error("Error filtering clients by status:", error);
      toast({
        title: "Error",
        description: "Failed to filter clients. Please try again.",
        variant: "destructive",
      });
    } finally {
      setClientLoading(false);
    }
  };
  
  // Reset all filters
  const resetFilters = async () => {
    setSearchQuery("");
    setFilterBroker("");
    setFilterStatus("");
    
    try {
      setClientLoading(true);
      const response = await apiRequest("GET", "/api/admin/clients");
      const data = await response.json();
      setClients(data);
    } catch (error) {
      console.error("Error fetching clients:", error);
      toast({
        title: "Error",
        description: "Failed to reset filters. Please try again.",
        variant: "destructive",
      });
    } finally {
      setClientLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <FinanceNavbar />
      
      <main className="flex-grow max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Card>
          <CardHeader>
            <CardTitle>Admin Dashboard</CardTitle>
            <CardDescription>
              Manage users, premium access, and clients
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            <Tabs
              defaultValue="users"
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <TabsList className="mb-4">
                <TabsTrigger value="users">User Management</TabsTrigger>
                <TabsTrigger value="clients">Client Management</TabsTrigger>
              </TabsList>
              
              {/* User Management Tab */}
              <TabsContent value="users">
                <div className="mb-4 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                  <div className="flex gap-2">
                    <Input
                      placeholder="Search users..."
                      value={userSearchQuery}
                      onChange={(e) => setUserSearchQuery(e.target.value)}
                      className="w-full sm:w-60"
                    />
                    <Button variant="outline" onClick={() => {
                      // Filter users by search query
                      if (userSearchQuery.trim()) {
                        const filteredUsers = users.filter(u => 
                          u.username.toLowerCase().includes(userSearchQuery.toLowerCase()) || 
                          u.email.toLowerCase().includes(userSearchQuery.toLowerCase())
                        );
                        setUsers(filteredUsers);
                      }
                    }}>
                      <Search className="h-4 w-4" />
                    </Button>
                  </div>
                  
                  <div className="flex gap-2">
                    <Select value={filterRole} onValueChange={setFilterRole}>
                      <SelectTrigger className="w-full sm:w-40">
                        <SelectValue placeholder="Filter by role" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="ADMIN">Admin</SelectItem>
                        <SelectItem value="USER">User</SelectItem>
                      </SelectContent>
                    </Select>
                    
                    <Button variant="outline" onClick={() => {
                      // Filter users by role
                      if (filterRole) {
                        const filteredUsers = users.filter(u => u.role === filterRole);
                        setUsers(filteredUsers);
                      }
                    }}>
                      <Filter className="h-4 w-4" />
                    </Button>
                  </div>
                  
                  <Button variant="ghost" onClick={async () => {
                    // Reset filters
                    setUserSearchQuery("");
                    setFilterRole("");
                    
                    try {
                      setUserLoading(true);
                      const response = await apiRequest("GET", "/api/admin/users");
                      const data = await response.json();
                      setUsers(data);
                    } catch (error) {
                      console.error("Error fetching users:", error);
                      toast({
                        title: "Error",
                        description: "Failed to reset filters. Please try again.",
                        variant: "destructive",
                      });
                    } finally {
                      setUserLoading(false);
                    }
                  }}>Reset</Button>
                </div>
                
                {userLoading ? (
                  <div className="flex justify-center items-center h-40">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Username</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Role</TableHead>
                        <TableHead>Premium Access</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {users.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center">
                            No users found
                          </TableCell>
                        </TableRow>
                      ) : (
                        users.map((user) => (
                          <TableRow key={user.id}>
                            <TableCell>{user.username}</TableCell>
                            <TableCell>{user.email}</TableCell>
                            <TableCell>
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                user.role === "ADMIN" 
                                  ? "bg-blue-100 text-blue-800" 
                                  : "bg-gray-100 text-gray-800"
                              }`}>
                                {user.role}
                              </span>
                            </TableCell>
                            <TableCell>
                              <Switch
                                checked={user.hasPremiumAccess}
                                disabled={user.role === "ADMIN"} // Admins always have premium access
                                onCheckedChange={() => 
                                  handleTogglePremiumAccess(user.id, user.hasPremiumAccess)
                                }
                              />
                            </TableCell>
                            <TableCell>
                              <Button 
                                variant="outline" 
                                size="sm"
                                disabled={user.role === "ADMIN"} // Cannot modify admin premium access
                                onClick={() => 
                                  handleTogglePremiumAccess(user.id, user.hasPremiumAccess)
                                }
                              >
                                {user.hasPremiumAccess ? "Revoke Access" : "Grant Access"}
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                )}
              </TabsContent>
              
              {/* Client Management Tab */}
              <TabsContent value="clients">
                <div className="mb-4 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                  <div className="flex gap-2 items-center">
                    <Dialog open={clientDialogOpen} onOpenChange={setClientDialogOpen}>
                      <DialogTrigger asChild>
                        <Button
                          onClick={() => {
                            setEditingClient(null);
                            form.reset({
                              clientId: "",
                              name: "",
                              broker: "",
                              contactNumber: "",
                              email: "",
                              pan: "",
                              aadhar: "",
                              status: CLIENT_STATUS.ACTIVE,
                              fund: 0
                            });
                          }}
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          Add Client
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-[600px]">
                        <DialogHeader>
                          <DialogTitle>{editingClient ? "Edit Client" : "Add New Client"}</DialogTitle>
                          <DialogDescription>
                            {editingClient 
                              ? "Update client information in the form below" 
                              : "Fill in the client details below to add a new client"}
                          </DialogDescription>
                        </DialogHeader>
                        
                        <Form {...form}>
                          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                              <FormField
                                control={form.control}
                                name="clientId"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Client ID</FormLabel>
                                    <FormControl>
                                      <Input placeholder="CL00123" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="name"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Name</FormLabel>
                                    <FormControl>
                                      <Input placeholder="John Doe" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="broker"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Broker</FormLabel>
                                    <FormControl>
                                      <Input placeholder="ABC Securities" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="contactNumber"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Contact Number</FormLabel>
                                    <FormControl>
                                      <Input placeholder="9876543210" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="email"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Email</FormLabel>
                                    <FormControl>
                                      <Input placeholder="john@example.com" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="pan"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>PAN Number</FormLabel>
                                    <FormControl>
                                      <Input placeholder="ABCDE1234F" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="aadhar"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Aadhar Number</FormLabel>
                                    <FormControl>
                                      <Input placeholder="123456789012" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="status"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Status</FormLabel>
                                    <Select
                                      onValueChange={field.onChange}
                                      defaultValue={field.value}
                                    >
                                      <FormControl>
                                        <SelectTrigger>
                                          <SelectValue placeholder="Select status" />
                                        </SelectTrigger>
                                      </FormControl>
                                      <SelectContent>
                                        <SelectItem value={CLIENT_STATUS.ACTIVE}>Active</SelectItem>
                                        <SelectItem value={CLIENT_STATUS.INACTIVE}>Inactive</SelectItem>
                                      </SelectContent>
                                    </Select>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="fund"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Fund Amount</FormLabel>
                                    <FormControl>
                                      <Input 
                                        type="number" 
                                        placeholder="10000" 
                                        {...field}
                                        onChange={(e) => field.onChange(parseFloat(e.target.value))}
                                      />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                            </div>
                            
                            <DialogFooter>
                              <Button type="submit">
                                {editingClient ? "Update Client" : "Add Client"}
                              </Button>
                            </DialogFooter>
                          </form>
                        </Form>
                      </DialogContent>
                    </Dialog>
                  </div>
                  
                  <div className="flex flex-col gap-2 sm:flex-row">
                    <div className="flex gap-2">
                      <Input
                        placeholder="Search clients..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="w-full sm:w-60"
                      />
                      <Button variant="outline" onClick={handleSearchClients}>
                        <Search className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    <div className="flex gap-2">
                      <Select value={filterBroker} onValueChange={setFilterBroker}>
                        <SelectTrigger className="w-full sm:w-40">
                          <SelectValue placeholder="Filter by broker" />
                        </SelectTrigger>
                        <SelectContent>
                          {Array.from(new Set(clients.map(c => c.broker))).map(broker => (
                            <SelectItem key={broker} value={broker}>{broker}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      <Button variant="outline" onClick={handleFilterByBroker}>
                        <Filter className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    <div className="flex gap-2">
                      <Select value={filterStatus} onValueChange={setFilterStatus}>
                        <SelectTrigger className="w-full sm:w-40">
                          <SelectValue placeholder="Filter by status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value={CLIENT_STATUS.ACTIVE}>Active</SelectItem>
                          <SelectItem value={CLIENT_STATUS.INACTIVE}>Inactive</SelectItem>
                        </SelectContent>
                      </Select>
                      
                      <Button variant="outline" onClick={handleFilterByStatus}>
                        <Filter className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    <Button variant="ghost" onClick={resetFilters}>Reset</Button>
                  </div>
                </div>
                
                {clientLoading ? (
                  <div className="flex justify-center items-center h-40">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="whitespace-nowrap">Client ID</TableHead>
                          <TableHead className="whitespace-nowrap">Name</TableHead>
                          <TableHead className="whitespace-nowrap">Broker</TableHead>
                          <TableHead className="whitespace-nowrap">Contact</TableHead>
                          <TableHead className="whitespace-nowrap">Email</TableHead>
                          <TableHead className="whitespace-nowrap">PAN</TableHead>
                          <TableHead className="whitespace-nowrap">AADHAR</TableHead>
                          <TableHead className="whitespace-nowrap">Status</TableHead>
                          <TableHead className="whitespace-nowrap">Fund</TableHead>
                          <TableHead className="whitespace-nowrap">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                    <TableBody>
                      {clients.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={10} className="text-center">
                            No clients found
                          </TableCell>
                        </TableRow>
                      ) : (
                        clients.map((client) => (
                          <TableRow key={client.id}>
                            <TableCell>{client.clientId}</TableCell>
                            <TableCell>{client.name}</TableCell>
                            <TableCell>{client.broker}</TableCell>
                            <TableCell>{client.contactNumber}</TableCell>
                            <TableCell>{client.email}</TableCell>
                            <TableCell>{client.pan}</TableCell>
                            <TableCell>{client.aadhar}</TableCell>
                            <TableCell>
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                client.status === CLIENT_STATUS.ACTIVE
                                  ? "bg-green-100 text-green-800"
                                  : "bg-red-100 text-red-800"
                              }`}>
                                {client.status}
                              </span>
                            </TableCell>
                            <TableCell>₹{parseFloat(client.fund.toString()).toLocaleString()}</TableCell>
                            <TableCell>
                              <div className="flex gap-2">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => handleEditClient(client)}
                                >
                                  Edit
                                </Button>
                                <Button 
                                  variant="destructive" 
                                  size="sm"
                                  onClick={() => handleDeleteClient(client.id)}
                                >
                                  Delete
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </main>
      
      <FinanceFooter />
    </div>
  );
}